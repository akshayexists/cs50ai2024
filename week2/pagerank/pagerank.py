import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    probabilityDistribution = {}
    if len(corpus[page]) == 0:
        for key in corpus.keys():
            probabilityDistribution[key] = 1/len(corpus)
    else:
        random_factor = (1-damping_factor)/len(corpus[page])
        other_factor = damping_factor/len(corpus[page])

        for key in corpus.keys():
            if key in corpus[page]:
                probabilityDistribution[key] = random_factor + other_factor
            else:
                probabilityDistribution[key] = random_factor
                
    return probabilityDistribution


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.

    The function accepts three arguments: corpus, a damping_factor, and n.

        The corpus is a Python dictionary mapping a page name to a set of all pages linked to by that page.
        The damping_factor is a floating point number representing the damping factor to be used by the transition model.
        n is an integer representing the number of samples that should be generated to estimate PageRank values.

    The return value of the function should be a Python dictionary with one key for each page in the corpus. Each key should be mapped to a value representing that page’s estimated PageRank (i.e., the proportion of all the samples that corresponded to that page). The values in this dictionary should sum to 1.
    The first sample should be generated by choosing from a page at random.
    For each of the remaining samples, the next sample should be generated from the previous sample based on the previous sample’s transition model.

        You will likely want to pass the previous sample into your transition_model function, along with the corpus and the damping_factor, to get the probabilities for the next sample.
        For example, if the transition probabilities are {"1.html": 0.05, "2.html": 0.475, "3.html": 0.475}, then 5% of the time the next sample generated should be "1.html", 47.5% of the time the next sample generated should be "2.html", and 47.5% of the time the next sample generated should be "3.html".

    You may assume that n will be at least 1.
    """
    sample_tally = corpus.copy()
    for i in sample_tally:
        sample_tally[i] = 0
    sample = None
    for i in range(0, n):
        if sample is not None:
            distribution = transition_model(corpus, sample, damping_factor)
            distribution_list = list(distribution.keys())
            distribution_prob = [distribution[i] for i in distribution_list]
            sample = random.choices(distribution_list, distribution_prob)[0]
        else:
            sample = random.choice(list(corpus.keys()))
        
        sample_tally[sample] += 1

    sampling_results = {}
    for link in sample_tally:
        sampling_results[link] = sample_tally[link]/n
    return sampling_results

def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.

    
    The function accepts two arguments: corpus and damping_factor.
        The corpus is a Python dictionary mapping a page name to a set of all pages linked to by that page.
        The damping_factor is a floating point number representing the damping factor to be used in the PageRank formula.
    The return value of the function should be a Python dictionary with one key for each page in the corpus. Each key should be mapped to a value representing that page’s PageRank. The values in this dictionary should sum to 1.
    The function should begin by assigning each page a rank of 1 / N, where N is the total number of pages in the corpus.
    The function should then repeatedly calculate new rank values based on all of the current rank values, according to the PageRank formula in the “Background” section. (i.e., calculating a page’s PageRank based on the PageRanks of all pages that link to it).
        A page that has no links at all should be interpreted as having one link for every page in the corpus (including itself).
    This process should repeat until no PageRank value changes by more than 0.001 between the current rank values and the new rank values.

    """
    n = len(corpus)
    old_pgrank = {}
    new_pgrank = {}
    #setting up initial distribution
    for page in corpus:
        old_pgrank[page] = 1/n
    complete = False
    while not complete:
        for page in corpus:
            runningprob = 0
            for a_link in corpus:
                if page in corpus[a_link]:
                    runningprob += (old_pgrank[a_link])/len(corpus[a_link])
                if len(corpus[a_link]) == 0:
                    runningprob += old_pgrank[a_link]/n
            runningprob *= damping_factor
            runningprob += (1-damping_factor)/n

            new_pgrank[page] = runningprob
        if max([abs(new_pgrank[x]-old_pgrank[x])>0.001 for x in old_pgrank]) < 0.001:
            complete = True
        else:
            old_pgrank = new_pgrank.copy()
    
    return old_pgrank
            



if __name__ == "__main__":
    main()
